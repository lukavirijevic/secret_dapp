/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SecretRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canReconstruct"
      | "closeSecret"
      | "confirmReceipt"
      | "getSecret"
      | "hasConfirmed"
      | "isParticipant"
      | "registerSecret"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ReceiptConfirmed"
      | "SecretClosed"
      | "SecretRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canReconstruct",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeSecret",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmReceipt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecret",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasConfirmed",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isParticipant",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSecret",
    values: [BytesLike, BigNumberish, AddressLike[], BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "canReconstruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeSecret",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSecret", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSecret",
    data: BytesLike
  ): Result;
}

export namespace ReceiptConfirmedEvent {
  export type InputTuple = [
    secretId: BytesLike,
    participant: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    secretId: string,
    participant: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    secretId: string;
    participant: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecretClosedEvent {
  export type InputTuple = [secretId: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [secretId: string, timestamp: bigint];
  export interface OutputObject {
    secretId: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecretRegisteredEvent {
  export type InputTuple = [
    secretId: BytesLike,
    owner: AddressLike,
    thresholdM: BigNumberish,
    participantsCount: BigNumberish,
    secretHash: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    secretId: string,
    owner: string,
    thresholdM: bigint,
    participantsCount: bigint,
    secretHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    secretId: string;
    owner: string;
    thresholdM: bigint;
    participantsCount: bigint;
    secretHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SecretRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): SecretRegistry;
  waitForDeployment(): Promise<this>;

  interface: SecretRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canReconstruct: TypedContractMethod<[secretId: BytesLike], [boolean], "view">;

  closeSecret: TypedContractMethod<[secretId: BytesLike], [void], "nonpayable">;

  confirmReceipt: TypedContractMethod<
    [secretId: BytesLike],
    [void],
    "nonpayable"
  >;

  getSecret: TypedContractMethod<
    [secretId: BytesLike],
    [
      [string, bigint, string, boolean, bigint, string[], bigint] & {
        owner: string;
        thresholdM: bigint;
        secretHash: string;
        active: boolean;
        createdAt: bigint;
        participants: string[];
        confirmations: bigint;
      }
    ],
    "view"
  >;

  hasConfirmed: TypedContractMethod<
    [secretId: BytesLike, who: AddressLike],
    [boolean],
    "view"
  >;

  isParticipant: TypedContractMethod<
    [secretId: BytesLike, who: AddressLike],
    [boolean],
    "view"
  >;

  registerSecret: TypedContractMethod<
    [
      secretId: BytesLike,
      thresholdM: BigNumberish,
      participants: AddressLike[],
      secretHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canReconstruct"
  ): TypedContractMethod<[secretId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "closeSecret"
  ): TypedContractMethod<[secretId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmReceipt"
  ): TypedContractMethod<[secretId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getSecret"
  ): TypedContractMethod<
    [secretId: BytesLike],
    [
      [string, bigint, string, boolean, bigint, string[], bigint] & {
        owner: string;
        thresholdM: bigint;
        secretHash: string;
        active: boolean;
        createdAt: bigint;
        participants: string[];
        confirmations: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasConfirmed"
  ): TypedContractMethod<
    [secretId: BytesLike, who: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isParticipant"
  ): TypedContractMethod<
    [secretId: BytesLike, who: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerSecret"
  ): TypedContractMethod<
    [
      secretId: BytesLike,
      thresholdM: BigNumberish,
      participants: AddressLike[],
      secretHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ReceiptConfirmed"
  ): TypedContractEvent<
    ReceiptConfirmedEvent.InputTuple,
    ReceiptConfirmedEvent.OutputTuple,
    ReceiptConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "SecretClosed"
  ): TypedContractEvent<
    SecretClosedEvent.InputTuple,
    SecretClosedEvent.OutputTuple,
    SecretClosedEvent.OutputObject
  >;
  getEvent(
    key: "SecretRegistered"
  ): TypedContractEvent<
    SecretRegisteredEvent.InputTuple,
    SecretRegisteredEvent.OutputTuple,
    SecretRegisteredEvent.OutputObject
  >;

  filters: {
    "ReceiptConfirmed(bytes32,address,uint64)": TypedContractEvent<
      ReceiptConfirmedEvent.InputTuple,
      ReceiptConfirmedEvent.OutputTuple,
      ReceiptConfirmedEvent.OutputObject
    >;
    ReceiptConfirmed: TypedContractEvent<
      ReceiptConfirmedEvent.InputTuple,
      ReceiptConfirmedEvent.OutputTuple,
      ReceiptConfirmedEvent.OutputObject
    >;

    "SecretClosed(bytes32,uint64)": TypedContractEvent<
      SecretClosedEvent.InputTuple,
      SecretClosedEvent.OutputTuple,
      SecretClosedEvent.OutputObject
    >;
    SecretClosed: TypedContractEvent<
      SecretClosedEvent.InputTuple,
      SecretClosedEvent.OutputTuple,
      SecretClosedEvent.OutputObject
    >;

    "SecretRegistered(bytes32,address,uint8,uint256,bytes32,uint64)": TypedContractEvent<
      SecretRegisteredEvent.InputTuple,
      SecretRegisteredEvent.OutputTuple,
      SecretRegisteredEvent.OutputObject
    >;
    SecretRegistered: TypedContractEvent<
      SecretRegisteredEvent.InputTuple,
      SecretRegisteredEvent.OutputTuple,
      SecretRegisteredEvent.OutputObject
    >;
  };
}
